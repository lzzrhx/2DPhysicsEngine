////////////////////////////////////////////////////////////////////////////////
// This document contains course notes for the course:
// "2D Game Physics Engine Programming" by Gustavo Pezzi
// https://pikuma.com/courses/game-physics-engine-programming
////////////////////////////////////////////////////////////////////////////////

 SECTIONS:
   #1: COURSE OVERVIEW
   #2: NOTES



  #1 | COURSE OVERVIEW:
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

   [X]  #1: Introduction
   [X]  #2: Vectors
   [X]  #3: Vector Operations
   [X]  #4: Dot Product & Cross Product
   [X]  #5: Normalizing Vectors
   [X]  #6: Vector Transformations
   [X]  #7: Vectors in C++
   [X]  #8: Starting our C++ Project
   [X]  #9: Particle Physics
   [X] #10: Simulating Movement
   [X] #11: Applying Forces
   [X] #12: Drag & Friction Forces
   [X] #13: Gravitational Attraction
   [X] #14: Spring Forces
   [X] #15: Rigid-Body Physics
   [X] #16: Shapes & Vertices
   [X] #17: Colliding Circles
   [X] #18: Impulse & Momentum
   [X] #19: Colliding Boxes
   [X] #20: Angular Collision Resolution
   [X] #21: Colliding Circles & Polygons
   [X] #22: Rendering Textures
   [X] #23: The World Object
   [X] #24: Collision Instability
   [X] #25: Constraints
   [X] #26: Matrices
   [X] #27: Distance Constraint
   [X] #28: System of Contraints
   [X] #29: Penetration Constraint
   [X] #30: Stack of Boxes
   [X] #31: Optimization Techniques
   [X] #32: Bonus Lecture: Verlet Method
   [X] #33: Conclusion

   [X] COMPLETED / [-] NOT COMPLETED



  #2 | NOTES
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   - Vector operations (2D):
     + Addition:      Vec2  (Vec2 v1, Vec2 v2)    { x = v1.x + v2.x;                          y = v1.y + v2.y; }
     + Subtraction:   Vec2  (Vec2 v1, Vec2 v2)    { x = v1.x - v2.x;                          y = v1.y - v2.y; }
     + Scale:         Vec2  (Vec2 v, float n)     { x = v.x * n;                              y = v.y * n; }
     + Rotate:        Vec2  (Vec2 v, float angle) { x = v.x * cos(angle) - v.y * sin(angle);  y = v.x * sin(angle) + v.y * cos(angle); }
     + Dot product:   float (Vec2 v1, Vec2 v2)    { v1.x * v2.x + v1.y * v2.y }
     + Cross product: float (Vec2 v1, Vec2 v2)    { v1.x * v2.y + v1.y * v2.x }
     + Magnitude:     float (Vec2 v)              { sqrt(v.x * v.x + v.y * v.y) }
   - Collision detection:
     + Circle
     + AABB - Axis-aligned bounding box
     + OBB - Oriented bounding-boxes
     + SAT - Separating axis theorem
       + Only works for convex polygons
       + There is at least one axis separating the two bodies
       + One of the most popular collision detection algorithms for rigid bodies (along with the GJK algorithm)
   - Links:
     + Erin Catto, Fast and Simple Physics using Sequential Impulses https://box2d.org/files/ErinCatto_SequentialImpulses_GDC2006.pdf
     + Erin Catto, box2d-lite                                        https://github.com/erincatto/box2d-lite
     + Gregody Hodges, Game Physics in One Weekend                   https://github.com/gamephysicsweekend/VulkanRenderer
     + Nilson Souto, Constrained Rigid-Body Simulation               https://www.toptal.com/game/video-game-physics-part-iii-constrained-rigid-body-simulation
     + Physically Based Modelling: Constrained Dynamics              http://www.cs.cmu.edu/~baraff/sigcourse/notesf.pdf
   - Optimizations / things to improve on the final implementation:
     + Contact caching (improved varm starting)
       + Sometimes called "manifold caching" - manifold->set of contacts
       + A new data structure called a Manifold, that keeps track of the contacts between two bodies. These contacts and their penetration constraints persist across the simulation.
       + With the stored contacts we can take advantage of varm starting
       + Before adding a new contact, check if it is "too close" to a previous contact, and do not update the manifold if it is too close.
       + Something similar in box2d: the Arbiter class
     + Continous Collision Detection
       + When two bodies move at high speed and "go through" eachother between updates
       + Use of tunneling to fix, check if two bodies will collide and return the time of impact
       + Lua example: https://github.com/hexian000/balls
     + Broad and narrow phase
       + Broad phase uses bounding-circle -> bounding-circle check
       + Narrow phase does a detailed check on results from broad phase
   - Numerical Methods (Numerical Integration)
     + Euler method
       + Find slope, use it to predict next point
       + Very fast method!
       + Explicit Euler Integration Method
         + The system will gain enery over time
         + Example:
           + Update acceleration (a=Fm)
           + Integrate velocity to find new position (x+=v*dt)
           + Integrate acceleration to find new velocity (v+=a*dt)
       + Semi-Implicit Euler Integration Method
         + Using the velocity for the next timestep in the current update
         + More accurate than the Explicit Method
         + The system will slowly loose energy over time
         + Example
           + Update acceleration (a=Fm)
           + Integrate acceleration to find new velocity (v+=a*dt)
           + Integrate velocity to find new position (x+=v*dt)
     + Mid-Point Method
       + More accurate, but more expensive than Euler
       + Sample the slope in the midpoint between the current point in time and += deltatime
       + Use the sampled slope from the midpoint in the current point to predict the point at += deltatime
     + Runge-Kutta (order 4) Method (RK4)
       + Very accurate, but very expensive
       + Similar to the Mid-Point method, but sampling the slope from 4 points between the current time and current time + deltatime
       + The sampled slopes have a weighted value
     + Verlet Method
       + Numerical stability!
       + Super fast!
       + Very good when there are multiple objects connected/contrained with eachother
       + First used in 1781 by Jean Delambre, but rediscovered many times, most recently by Loup Verlet in the 1960s
       + Used by P.H Cowell and A.C. Crommelin in 1909 to compute the orbit of Halley's Comet
       + Good numerical stability and time reversibility
       + How it works: Stores current position and previous position (Instead of storing position and velocity)
   - Next steps
     + David M Bourg, Physics for Game Developers
     + Davod H Eberly, Game Physics
     + 3D Math Primer for Graphics and Game Development

